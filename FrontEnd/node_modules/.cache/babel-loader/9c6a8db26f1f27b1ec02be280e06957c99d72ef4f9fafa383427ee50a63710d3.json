{"ast":null,"code":"// import React, { useState } from \"react\";\n// import \"./style.css\";\n\n// const buttons = [\n//   '%', 'CE', 'C', 'del',\n//   '1/x', 'x²', '√', '/',\n//   '7', '8', '9', '*',\n//   '4', '5', '6', '-',\n//   '1', '2', '3', '+',\n//   '+/-', '0', '.', '='\n// ];\n\n// export default function Calculator() {\n//   const [display, setDisplay] = useState(\"\");\n//   const [currentNumber, setCurrentNumber] = useState(\"\");\n//   const [expression, setExpression] = useState([]);\n\n//   const handleSingleOperation = (operation) => {\n//     let result;\n//     const number = parseFloat(currentNumber);\n\n//     if (isNaN(number)) return;\n\n//     switch (operation) {\n//       case \"1/x\":\n//         result = 1 / number;\n//         break;\n//       case \"x²\":\n//         result = number ** 2;\n//         break;\n//       case \"√\":\n//         result = Math.sqrt(number);\n//         break;\n//       case \"%\":\n//         result = number / 100;\n//         break;\n//       default:\n//         return;\n//     }\n\n//     setCurrentNumber(result.toString());\n//     const updatedDisplay = display.replace(currentNumber, result.toString());\n//     setDisplay(updatedDisplay);\n//   };\n\n//   const handleOperator = (operator) => {\n//     if (currentNumber === \"\") return;\n\n//     setExpression([...expression, currentNumber, operator]);\n//     setCurrentNumber(\"\");\n//     setDisplay((prevDisplay) => prevDisplay + ` ${operator} `);\n//   };\n\n//   const handleEquals = async () => {\n//     if (currentNumber === \"\") return;\n//     const fullExpression = [...expression, currentNumber].join(\" \");\n\n//     try {\n//       const response = await fetch(\"http://localhost:8080/api/calculate\");\n\n//       // if (!response.ok) {\n//       //   throw new Error(\"Network response was not ok\");\n//       // }\n\n//       const result = await response.text;\n//       setDisplay(result.toString());\n//       setCurrentNumber(result.toString());\n//       setExpression([]);\n//     } catch (error) {\n//       setDisplay(\"Error\");\n//     }\n//   };\n\n//   const handleClick = (button) => {\n//     if (button === \"C\" || button === \"CE\") {\n//       setDisplay(\"\");\n//       setCurrentNumber(\"\");\n//       setExpression([]);\n//     } else if (button === \"del\") {\n//       setCurrentNumber(currentNumber.slice(0, -1));\n//       setDisplay(display.slice(0, -1));\n//     } else if (button === \"+/-\") {\n//       if (currentNumber) {\n//         const toggledNumber = (parseFloat(currentNumber) * -1).toString();\n//         setCurrentNumber(toggledNumber);\n//         setDisplay((prevDisplay) =>\n//           prevDisplay.slice(0, -currentNumber.length) + toggledNumber\n//         );\n//       }\n//     } else if ([\"+\", \"-\", \"*\", \"/\"].includes(button)) {\n//       handleOperator(button);\n//     } else if (button === \"1/x\" || button === \"x²\" || button === \"√\" || button === \"%\") {\n//       handleSingleOperation(button);\n//     } else if (button === \"=\") {\n//       handleEquals();\n//     } else {\n//       setCurrentNumber(currentNumber + button);\n//       setDisplay(display + button);\n//     }\n//   };\n\n//   return (\n//     <div className=\"calculator\">\n//       <div className=\"display\">{display}</div>\n//       <div className=\"buttons\">\n//         {buttons.map((button) => (\n//           <button key={button} onClick={() => handleClick(button)}>\n//             {button}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/DELL/Desktop/Calculator/src/Calculator/index.js"],"sourcesContent":["// import React, { useState } from \"react\";\r\n// import \"./style.css\";\r\n\r\n// const buttons = [\r\n//   '%', 'CE', 'C', 'del',\r\n//   '1/x', 'x²', '√', '/',\r\n//   '7', '8', '9', '*',\r\n//   '4', '5', '6', '-',\r\n//   '1', '2', '3', '+',\r\n//   '+/-', '0', '.', '='\r\n// ];\r\n\r\n// export default function Calculator() {\r\n//   const [display, setDisplay] = useState(\"\");\r\n//   const [currentNumber, setCurrentNumber] = useState(\"\");\r\n//   const [expression, setExpression] = useState([]);\r\n\r\n//   const handleSingleOperation = (operation) => {\r\n//     let result;\r\n//     const number = parseFloat(currentNumber);\r\n\r\n//     if (isNaN(number)) return;\r\n\r\n//     switch (operation) {\r\n//       case \"1/x\":\r\n//         result = 1 / number;\r\n//         break;\r\n//       case \"x²\":\r\n//         result = number ** 2;\r\n//         break;\r\n//       case \"√\":\r\n//         result = Math.sqrt(number);\r\n//         break;\r\n//       case \"%\":\r\n//         result = number / 100;\r\n//         break;\r\n//       default:\r\n//         return;\r\n//     }\r\n\r\n//     setCurrentNumber(result.toString());\r\n//     const updatedDisplay = display.replace(currentNumber, result.toString());\r\n//     setDisplay(updatedDisplay);\r\n//   };\r\n\r\n//   const handleOperator = (operator) => {\r\n//     if (currentNumber === \"\") return;\r\n\r\n//     setExpression([...expression, currentNumber, operator]);\r\n//     setCurrentNumber(\"\");\r\n//     setDisplay((prevDisplay) => prevDisplay + ` ${operator} `);\r\n//   };\r\n\r\n//   const handleEquals = async () => {\r\n//     if (currentNumber === \"\") return;\r\n//     const fullExpression = [...expression, currentNumber].join(\" \");\r\n\r\n//     try {\r\n//       const response = await fetch(\"http://localhost:8080/api/calculate\");\r\n\r\n//       // if (!response.ok) {\r\n//       //   throw new Error(\"Network response was not ok\");\r\n//       // }\r\n\r\n//       const result = await response.text;\r\n//       setDisplay(result.toString());\r\n//       setCurrentNumber(result.toString());\r\n//       setExpression([]);\r\n//     } catch (error) {\r\n//       setDisplay(\"Error\");\r\n//     }\r\n//   };\r\n\r\n//   const handleClick = (button) => {\r\n//     if (button === \"C\" || button === \"CE\") {\r\n//       setDisplay(\"\");\r\n//       setCurrentNumber(\"\");\r\n//       setExpression([]);\r\n//     } else if (button === \"del\") {\r\n//       setCurrentNumber(currentNumber.slice(0, -1));\r\n//       setDisplay(display.slice(0, -1));\r\n//     } else if (button === \"+/-\") {\r\n//       if (currentNumber) {\r\n//         const toggledNumber = (parseFloat(currentNumber) * -1).toString();\r\n//         setCurrentNumber(toggledNumber);\r\n//         setDisplay((prevDisplay) =>\r\n//           prevDisplay.slice(0, -currentNumber.length) + toggledNumber\r\n//         );\r\n//       }\r\n//     } else if ([\"+\", \"-\", \"*\", \"/\"].includes(button)) {\r\n//       handleOperator(button);\r\n//     } else if (button === \"1/x\" || button === \"x²\" || button === \"√\" || button === \"%\") {\r\n//       handleSingleOperation(button);\r\n//     } else if (button === \"=\") {\r\n//       handleEquals();\r\n//     } else {\r\n//       setCurrentNumber(currentNumber + button);\r\n//       setDisplay(display + button);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"calculator\">\r\n//       <div className=\"display\">{display}</div>\r\n//       <div className=\"buttons\">\r\n//         {buttons.map((button) => (\r\n//           <button key={button} onClick={() => handleClick(button)}>\r\n//             {button}\r\n//           </button>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
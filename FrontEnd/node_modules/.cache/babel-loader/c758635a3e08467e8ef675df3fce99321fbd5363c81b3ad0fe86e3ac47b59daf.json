{"ast":null,"code":"import handleSingleOperation from \"./handleSingleOperation\";\nimport handleOperator from \"./handleOperator\";\nimport handleEquals from \"./handleEquals\";\nimport handleDelete from \"./handleDelete\";\nconst handleClick = (button, display, setDisplay, currentNumber, setCurrentNumber, expression, setExpression, isResultDisplayed, setIsResultDisplayed) => {\n  // Handle clear operations\n  if (button === \"C\" || button === \"CE\") {\n    setDisplay(\"\");\n    setCurrentNumber(\"\");\n    setExpression(\"\");\n    setIsResultDisplayed(false);\n  }\n  // Handle delete\n  else if (button === \"del\") {\n    handleDelete(currentNumber, setCurrentNumber, display, setDisplay, expression, setExpression, isResultDisplayed);\n  }\n  // Handle sign toggle\n  else if (button === \"+/-\") {\n    setIsResultDisplayed(false);\n    if (currentNumber) {\n      const toggledNumber = (parseFloat(currentNumber) * -1).toString();\n      setCurrentNumber(toggledNumber);\n      setDisplay(prevDisplay => {\n        // Replace the last occurrence of the current number with its toggled version\n        const parts = prevDisplay.split(/([+\\-*/])/);\n        parts[parts.length - 1] = toggledNumber;\n        return parts.join('');\n      });\n    } else if (expression) {\n      // If no current number, toggle the last number in the expression\n      const parts = expression.split(/([+\\-*/])/);\n      const lastNumber = parts[parts.length - 1];\n      if (lastNumber && !isNaN(parseFloat(lastNumber))) {\n        const toggledNumber = (parseFloat(lastNumber) * -1).toString();\n        parts[parts.length - 1] = toggledNumber;\n        const newExpression = parts.join('');\n        setExpression(newExpression);\n        setDisplay(newExpression);\n      }\n    }\n  }\n  // Handle operators\n  else if ([\"+\", \"-\", \"*\", \"/\"].includes(button)) {\n    handleOperator(button, currentNumber, setExpression, setCurrentNumber, setDisplay, setIsResultDisplayed);\n  }\n  // Handle single operations\n  else if ([\"1/x\", \"x²\", \"√\", \"%\"].includes(button)) {\n    handleSingleOperation(button, currentNumber, setDisplay, setCurrentNumber, display, setIsResultDisplayed);\n  }\n  // Handle equals\n  else if (button === \"=\") {\n    handleEquals(currentNumber, expression, setDisplay, setCurrentNumber, setExpression, setIsResultDisplayed);\n  }\n  // Handle number and decimal input\n  else {\n    // Handle multiple decimal points\n    if (button === \".\" && currentNumber.includes(\".\")) return;\n    if (isResultDisplayed) {\n      // Reset if a result is currently displayed\n      setCurrentNumber(button);\n      setDisplay(button);\n      setExpression(\"\");\n      setIsResultDisplayed(false);\n    } else {\n      // Append number or decimal\n      setCurrentNumber(currentNumber + button);\n      setDisplay(display + button);\n    }\n  }\n};\nexport default handleClick;","map":{"version":3,"names":["handleSingleOperation","handleOperator","handleEquals","handleDelete","handleClick","button","display","setDisplay","currentNumber","setCurrentNumber","expression","setExpression","isResultDisplayed","setIsResultDisplayed","toggledNumber","parseFloat","toString","prevDisplay","parts","split","length","join","lastNumber","isNaN","newExpression","includes"],"sources":["D:/Farouk/YEAR 2/First Term/Programming 2/lab 2/Calculator/FrontEnd/src/Calculator/Functions/handleClick.js"],"sourcesContent":["import handleSingleOperation from \"./handleSingleOperation\";\r\nimport handleOperator from \"./handleOperator\";\r\nimport handleEquals from \"./handleEquals\";\r\nimport handleDelete from \"./handleDelete\";\r\n\r\nconst handleClick = (button, display, setDisplay, currentNumber, setCurrentNumber, expression, setExpression, isResultDisplayed, setIsResultDisplayed) => {\r\n  // Handle clear operations\r\n  if (button === \"C\" || button === \"CE\") {\r\n    setDisplay(\"\");\r\n    setCurrentNumber(\"\");\r\n    setExpression(\"\");\r\n    setIsResultDisplayed(false);\r\n  } \r\n  // Handle delete\r\n  else if (button === \"del\") {\r\n    handleDelete(currentNumber, setCurrentNumber, display, setDisplay, expression, setExpression, isResultDisplayed);\r\n  } \r\n  // Handle sign toggle\r\n  else if (button === \"+/-\") {\r\n    setIsResultDisplayed(false);\r\n    if (currentNumber) {\r\n      const toggledNumber = (parseFloat(currentNumber) * -1).toString();\r\n      setCurrentNumber(toggledNumber);\r\n      setDisplay((prevDisplay) => {\r\n        // Replace the last occurrence of the current number with its toggled version\r\n        const parts = prevDisplay.split(/([+\\-*/])/);\r\n        parts[parts.length - 1] = toggledNumber;\r\n        return parts.join('');\r\n      });\r\n    } else if (expression) {\r\n      // If no current number, toggle the last number in the expression\r\n      const parts = expression.split(/([+\\-*/])/);\r\n      const lastNumber = parts[parts.length - 1];\r\n      if (lastNumber && !isNaN(parseFloat(lastNumber))) {\r\n        const toggledNumber = (parseFloat(lastNumber) * -1).toString();\r\n        parts[parts.length - 1] = toggledNumber;\r\n        const newExpression = parts.join('');\r\n        setExpression(newExpression);\r\n        setDisplay(newExpression);\r\n      }\r\n    }\r\n  } \r\n  // Handle operators\r\n  else if ([\"+\", \"-\", \"*\", \"/\"].includes(button)) {\r\n    handleOperator(button, currentNumber, setExpression, setCurrentNumber, setDisplay, setIsResultDisplayed);\r\n  } \r\n  // Handle single operations\r\n  else if ([\"1/x\", \"x²\", \"√\", \"%\"].includes(button)) {\r\n    handleSingleOperation(button, currentNumber, setDisplay, setCurrentNumber, display, setIsResultDisplayed);\r\n  } \r\n  // Handle equals\r\n  else if (button === \"=\") {\r\n    handleEquals(currentNumber, expression, setDisplay, setCurrentNumber, setExpression, setIsResultDisplayed);\r\n  } \r\n  // Handle number and decimal input\r\n  else {\r\n    // Handle multiple decimal points\r\n    if (button === \".\" && currentNumber.includes(\".\")) return;\r\n\r\n    if (isResultDisplayed) {\r\n      // Reset if a result is currently displayed\r\n      setCurrentNumber(button);\r\n      setDisplay(button);\r\n      setExpression(\"\");\r\n      setIsResultDisplayed(false);\r\n    } else {\r\n      // Append number or decimal\r\n      setCurrentNumber(currentNumber + button);\r\n      setDisplay(display + button);\r\n    }\r\n  }\r\n};\r\n\r\nexport default handleClick;"],"mappings":"AAAA,OAAOA,qBAAqB,MAAM,yBAAyB;AAC3D,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,YAAY,MAAM,gBAAgB;AACzC,OAAOC,YAAY,MAAM,gBAAgB;AAEzC,MAAMC,WAAW,GAAGA,CAACC,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,aAAa,EAAEC,gBAAgB,EAAEC,UAAU,EAAEC,aAAa,EAAEC,iBAAiB,EAAEC,oBAAoB,KAAK;EACxJ;EACA,IAAIR,MAAM,KAAK,GAAG,IAAIA,MAAM,KAAK,IAAI,EAAE;IACrCE,UAAU,CAAC,EAAE,CAAC;IACdE,gBAAgB,CAAC,EAAE,CAAC;IACpBE,aAAa,CAAC,EAAE,CAAC;IACjBE,oBAAoB,CAAC,KAAK,CAAC;EAC7B;EACA;EAAA,KACK,IAAIR,MAAM,KAAK,KAAK,EAAE;IACzBF,YAAY,CAACK,aAAa,EAAEC,gBAAgB,EAAEH,OAAO,EAAEC,UAAU,EAAEG,UAAU,EAAEC,aAAa,EAAEC,iBAAiB,CAAC;EAClH;EACA;EAAA,KACK,IAAIP,MAAM,KAAK,KAAK,EAAE;IACzBQ,oBAAoB,CAAC,KAAK,CAAC;IAC3B,IAAIL,aAAa,EAAE;MACjB,MAAMM,aAAa,GAAG,CAACC,UAAU,CAACP,aAAa,CAAC,GAAG,CAAC,CAAC,EAAEQ,QAAQ,CAAC,CAAC;MACjEP,gBAAgB,CAACK,aAAa,CAAC;MAC/BP,UAAU,CAAEU,WAAW,IAAK;QAC1B;QACA,MAAMC,KAAK,GAAGD,WAAW,CAACE,KAAK,CAAC,WAAW,CAAC;QAC5CD,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,GAAGN,aAAa;QACvC,OAAOI,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,MAAM,IAAIX,UAAU,EAAE;MACrB;MACA,MAAMQ,KAAK,GAAGR,UAAU,CAACS,KAAK,CAAC,WAAW,CAAC;MAC3C,MAAMG,UAAU,GAAGJ,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC;MAC1C,IAAIE,UAAU,IAAI,CAACC,KAAK,CAACR,UAAU,CAACO,UAAU,CAAC,CAAC,EAAE;QAChD,MAAMR,aAAa,GAAG,CAACC,UAAU,CAACO,UAAU,CAAC,GAAG,CAAC,CAAC,EAAEN,QAAQ,CAAC,CAAC;QAC9DE,KAAK,CAACA,KAAK,CAACE,MAAM,GAAG,CAAC,CAAC,GAAGN,aAAa;QACvC,MAAMU,aAAa,GAAGN,KAAK,CAACG,IAAI,CAAC,EAAE,CAAC;QACpCV,aAAa,CAACa,aAAa,CAAC;QAC5BjB,UAAU,CAACiB,aAAa,CAAC;MAC3B;IACF;EACF;EACA;EAAA,KACK,IAAI,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAACC,QAAQ,CAACpB,MAAM,CAAC,EAAE;IAC9CJ,cAAc,CAACI,MAAM,EAAEG,aAAa,EAAEG,aAAa,EAAEF,gBAAgB,EAAEF,UAAU,EAAEM,oBAAoB,CAAC;EAC1G;EACA;EAAA,KACK,IAAI,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,CAAC,CAACY,QAAQ,CAACpB,MAAM,CAAC,EAAE;IACjDL,qBAAqB,CAACK,MAAM,EAAEG,aAAa,EAAED,UAAU,EAAEE,gBAAgB,EAAEH,OAAO,EAAEO,oBAAoB,CAAC;EAC3G;EACA;EAAA,KACK,IAAIR,MAAM,KAAK,GAAG,EAAE;IACvBH,YAAY,CAACM,aAAa,EAAEE,UAAU,EAAEH,UAAU,EAAEE,gBAAgB,EAAEE,aAAa,EAAEE,oBAAoB,CAAC;EAC5G;EACA;EAAA,KACK;IACH;IACA,IAAIR,MAAM,KAAK,GAAG,IAAIG,aAAa,CAACiB,QAAQ,CAAC,GAAG,CAAC,EAAE;IAEnD,IAAIb,iBAAiB,EAAE;MACrB;MACAH,gBAAgB,CAACJ,MAAM,CAAC;MACxBE,UAAU,CAACF,MAAM,CAAC;MAClBM,aAAa,CAAC,EAAE,CAAC;MACjBE,oBAAoB,CAAC,KAAK,CAAC;IAC7B,CAAC,MAAM;MACL;MACAJ,gBAAgB,CAACD,aAAa,GAAGH,MAAM,CAAC;MACxCE,UAAU,CAACD,OAAO,GAAGD,MAAM,CAAC;IAC9B;EACF;AACF,CAAC;AAED,eAAeD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\DELL\\\\Desktop\\\\Calculator\\\\src\\\\Calculator\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst buttons = ['%', 'CE', 'C', 'del', '1/x', 'x²', '√', '/', '7', '8', '9', '*', '4', '5', '6', '-', '1', '2', '3', '+', '+/-', '0', '.', '='];\nconst symbols = [\"+\", \"-\", \"*\", \"/\"];\nexport default function Calculator() {\n  _s();\n  const [display, setDisplay] = useState(\"\");\n  const [currentNumber, setCurrentNumber] = useState(\"\");\n  const [expression, setExpression] = useState([]);\n\n  // Fetch result from backend\n  const fetchResult = async (operation, params) => {\n    try {\n      const response = await fetch(`http://localhost:8080/${operation}`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(params)\n      });\n      if (!response.ok) {\n        throw new Error(\"Network response was not ok\");\n      }\n      const result = await response.text();\n      setCurrentNumber(result);\n      setDisplay(result);\n      return result;\n    } catch (error) {\n      setDisplay(\"Error\");\n      console.error(\"Backend error:\", error);\n    }\n  };\n\n  // Handle single operations (e.g., square, square root)\n  const handleSingleOperation = operation => {\n    const number = parseFloat(currentNumber);\n    if (isNaN(number)) return;\n    fetchResult(operation, {\n      number\n    });\n  };\n\n  // Handle operator (e.g., +, -, *, /)\n  const handleOperator = operator => {\n    if (currentNumber === \"\") return;\n    setExpression([...expression, currentNumber, operator]);\n    setCurrentNumber(\"\");\n    setDisplay(prev => prev + ` ${operator} `);\n  };\n  const handleEquals = () => {\n    if (currentNumber === \"\") return;\n    fetchResult(\"evaluate\", {\n      expression: [...expression, currentNumber]\n    });\n    setExpression([]);\n  };\n  const handleClick = button => {\n    if (button === \"C\" || button === \"CE\") {\n      setDisplay(\"\");\n      setCurrentNumber(\"\");\n      setExpression([]);\n    } else if (button === \"del\") {\n      setCurrentNumber(currentNumber.slice(0, -1));\n      setDisplay(display.slice(0, -1));\n    } else if (button === \"+/-\") {\n      if (currentNumber) {\n        const toggledNumber = (parseFloat(currentNumber) * -1).toString();\n        setCurrentNumber(toggledNumber);\n        setDisplay(prev => prev.slice(0, -currentNumber.length) + toggledNumber);\n      }\n    } else if (symbols.includes(button)) {\n      handleOperator(button);\n    } else if (button === \"1/x\" || button === \"x²\" || button === \"√\" || button === \"%\") {\n      handleSingleOperation(button);\n    } else if (button === \"=\") {\n      handleEquals();\n    } else {\n      setCurrentNumber(currentNumber + button);\n      setDisplay(display + button);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calculator\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"display\",\n      children: display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttons\",\n      children: buttons.map(button => /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleClick(button),\n        children: button\n      }, button, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n}\n_s(Calculator, \"M6zYgRiTpfxxCncdH0BSRTkHj4M=\");\n_c = Calculator;\nvar _c;\n$RefreshReg$(_c, \"Calculator\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","buttons","symbols","Calculator","_s","display","setDisplay","currentNumber","setCurrentNumber","expression","setExpression","fetchResult","operation","params","response","fetch","method","headers","body","JSON","stringify","ok","Error","result","text","error","console","handleSingleOperation","number","parseFloat","isNaN","handleOperator","operator","prev","handleEquals","handleClick","button","slice","toggledNumber","toString","length","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","onClick","_c","$RefreshReg$"],"sources":["C:/Users/DELL/Desktop/Calculator/src/Calculator/index.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst buttons = [\r\n  '%', 'CE', 'C', 'del',\r\n  '1/x', 'x²', '√', '/',\r\n  '7', '8', '9', '*',\r\n  '4', '5', '6', '-',\r\n  '1', '2', '3', '+',\r\n  '+/-', '0', '.', '='\r\n];\r\nconst symbols = [\"+\", \"-\", \"*\", \"/\"];\r\n\r\nexport default function Calculator() {\r\n  const [display, setDisplay] = useState(\"\");\r\n  const [currentNumber, setCurrentNumber] = useState(\"\");\r\n  const [expression, setExpression] = useState([]);\r\n\r\n  // Fetch result from backend\r\n  const fetchResult = async (operation, params) => {\r\n    try {\r\n      const response = await fetch(`http://localhost:8080/${operation}`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(params),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Network response was not ok\");\r\n      }\r\n\r\n      const result = await response.text();\r\n      setCurrentNumber(result);\r\n      setDisplay(result);\r\n      return result;\r\n    } catch (error) {\r\n      setDisplay(\"Error\");\r\n      console.error(\"Backend error:\", error);\r\n    }\r\n  };\r\n\r\n  // Handle single operations (e.g., square, square root)\r\n  const handleSingleOperation = (operation) => {\r\n    const number = parseFloat(currentNumber);\r\n    if (isNaN(number)) return;\r\n\r\n    fetchResult(operation, { number });\r\n  };\r\n\r\n  // Handle operator (e.g., +, -, *, /)\r\n  const handleOperator = (operator) => {\r\n    if (currentNumber === \"\") return;\r\n\r\n    setExpression([...expression, currentNumber, operator]);\r\n    setCurrentNumber(\"\");\r\n    setDisplay((prev) => prev + ` ${operator} `);\r\n  };\r\n\r\n \r\n  const handleEquals = () => {\r\n    if (currentNumber === \"\") return;\r\n\r\n    fetchResult(\"evaluate\", { expression: [...expression, currentNumber] });\r\n    setExpression([]);\r\n  };\r\n\r\n  \r\n  const handleClick = (button) => {\r\n    if (button === \"C\" || button === \"CE\") {\r\n      setDisplay(\"\");\r\n      setCurrentNumber(\"\");\r\n      setExpression([]);\r\n    } else if (button === \"del\") {\r\n      setCurrentNumber(currentNumber.slice(0, -1));\r\n      setDisplay(display.slice(0, -1));\r\n    } else if (button === \"+/-\") {\r\n      if (currentNumber) {\r\n        const toggledNumber = (parseFloat(currentNumber) * -1).toString();\r\n        setCurrentNumber(toggledNumber);\r\n        setDisplay((prev) =>\r\n          prev.slice(0, -currentNumber.length) + toggledNumber \r\n        );\r\n      }\r\n    } else if (symbols.includes(button)) {\r\n      handleOperator(button);\r\n    } else if (button === \"1/x\" || button === \"x²\" || button === \"√\" || button === \"%\") {\r\n      handleSingleOperation(button);\r\n    } else if (button === \"=\") {\r\n      handleEquals();\r\n    } else {\r\n      setCurrentNumber(currentNumber + button);\r\n      setDisplay(display + button);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"calculator\">\r\n      <div className=\"display\">{display}</div>\r\n      <div className=\"buttons\">\r\n        {buttons.map((button) => (\r\n          <button key={button} onClick={() => handleClick(button)}>\r\n            {button}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}